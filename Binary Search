//Binary Search is very useful algorithm in the field of computer science
//It helps to search the element in an array in O(logn) time complexity in a sorted array 
//It has many application such as finding lower and upper bound ,autocompletion in search bar etc.( TOO many ;) )

//IMPLEMENTATION in C++

//AUTHOR:PRAVEEN KUMAR (praveeenawesome)
#include<bits/stdc++.h>

#define mod 1e9+7

using namespace std;

bool binary_search(vector<int> v,int l,int r,int target) {

	if(r >= l) {        // Checking if lower limit is not greater than the upper limit 
		
		int m = (l + r) / 2 ;   //mid value

		if(v[m] == target) {     // checking if the middle element itself is the required element 

			return 1;
		
		}
        
        else if(target < v[m]) {
			
			return binary_search(v,l,m-1,target) ;   //return left subarray if target is less than mid value
		
		}

		else
			return binary_search(v,m+1,r,target) ;	//return right subarray if target is more than mid value 
				
	}

    return 0;   //if the value is not present in the array return 0

}
int main() {

	int n,target;     //size of the array & Element to be searched in the array resp.
	
	cin>>n>>target;
	
	std::vector<int> v;    //inputting values to the array
	
	for (int i = 0; i < n; ++i) { 
			
			int c;
			cin>>c;

			v.emplace_back(c);
	}

	sort(v.begin(),v.end());  //sorting the array

	if(binary_search(v,0,n-1,target)) {          // checking if the element is present in the array or not 
		
		cout << " The target element is in the array. ";
	
	}
	else {
	
    	cout << " The target element is not in the array. ";
	
	}

}
