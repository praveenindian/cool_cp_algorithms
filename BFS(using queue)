//BREADTH-FIRST SEARCH ON AN UNDIRECTED GRAPH USING ADJACENCY LIST REPRESENTATION 
//IMPLEMENTATION OF ITERATIVE APPROACH USING QUEUE 

//Author : PRAVEEN KUMAR

//CODE

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int n;
void bfs(int curr_node , std :: vector< int > v[] , bool visited[]){ 

	// this function is similar to the iterative approach of dfs only difference is here we use queue instead of stack
  // a little intuition will help you to understand why stack and queue are used in dfs and bfs respectively ;). 

	queue< int > q; //storing the adjacent nodes of the current node in a queue 
	q.push(curr_node);

	while(!q.empty()){	

		if(visited[q.front()]){	//if the node is already visited the pop it and continue
			q.pop();
			continue;
		}

		visited[ q.front() ] = 1;	//if the node is unvisited 
		cout << q.front() << " " ;

		for(auto x : v[ q.front() ]){  //searching for adjacent unvisited node of the current node

			if(!visited[ x ]){
				q.push(x);
			}

		} 
	}

}
int main(){
	cout << "Enter the number of nodes in the graph : \n"; //number of nodes
	cin >> n;
	
	int m;
	cout << "Enter the number of edges in the graph : \n";  //number of edges
	cin >> m;

	std :: vector< int > v[n];	//storing graph in adjacency list representation
	cout<<"Enter the edge pairs of the graph : ";
	for(int i = 0 ; i < m ; ++i ){
		int c,d;
		cin >> c >> d;
		v[c].emplace_back(d);
		v[d].emplace_back(c);
	}

	bool visited[n] ;	// boolean array for the information about visited nodes
	memset(visited , 0 ,sizeof(visited) ); // initializing visited to false

	cout<<"\nThe sequence of nodes obtained after bfs on the given graph is : ";
	bfs(0 , v , visited); //bfs

}
